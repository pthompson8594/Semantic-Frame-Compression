# ULTRA SFC v3.0: Maximum Compression for LLM Transfer
# 30:1 compression ratio, <16K limit, machine-optimized

## CORE NOTATION
FR{K:v+v,N:{S:d},R:a→b→c,P:[x+y],Q:1-3,L:CORE→L1→L2→L3,@:pat,APP:@x,WH:ctx,IN:[f1,f2]}

## KEY MAPPINGS
Single-char keys for max compression:
T=title,D=desc,F=feat,R=req,I=install,U=usage,C=config,A=arch,M=meta,V=version,S=status,L=license,P=purpose,E=env,O=opt,B=build,DB=debug,ST=style,TR=troubleshoot,CO=contrib,FL=files,SC=scripts,CL=classes,TH=threading,PO=performance,EH=error-handling,PM=project-meta,CS=codebase-structure,CA=core-architecture,TI=technical-implementation,IE=installation-ecosystem,FM=feature-matrix,RB=runtime-behavior,CFG=config-system,BD=build-deployment,RD=recent-development,TK=troubleshooting-knowledge,EF=extensibility-framework,DM=deployment-metadata

## QUALITY MARKERS
1=basic(functional,minimal) 2=prod(robust,ux) 3=enterprise(comprehensive,polish,docs)

## SYMBOLS
+=and |=or →=to/flow !=not ←=from ↔=bidirectional ⊂=contains []array {}object ()group ~=approx #=count $=cost %=percent @=pattern &=ref *=all ?=optional

## SYMBOL REFS (1-char flexible)
Available: @#$%&!*?~^<>|+=_-{}[]()
Define-as-needed: SYMBOLS:{@:entityType1,#:entityType2,$:entityType3,...}
Common-types: person,location,function,variable,file,constant,class,error,api,service,component,table,method,property,library,endpoint

## ABBREVIATIONS
### Tech Stack
py=python qt=pyqt js=javascript ts=typescript cpp=c++ cs=csharp go=golang rs=rust rb=ruby php=php jv=java kt=kotlin sw=swift sc=scala

### Common Terms
app=application svc=service cfg=config mgmt=management auth=authentication db=database api=application-programming-interface ui=user-interface ux=user-experience cli=command-line-interface gui=graphical-user-interface sdk=software-development-kit lib=library fw=framework pkg=package dep=dependency repo=repository doc=documentation test=testing prod=production dev=development stg=staging

### System/OS
lin=linux win=windows mac=macos bsd=freebsd arch=archlinux ubu=ubuntu deb=debian fed=fedora rh=redhat cent=centos way=wayland x11=x11 sys=systemd

### Operations
inst=install uninst=uninstall cfg=configure bld=build dep=deploy start=start stop=stop rst=restart en=enable dis=disable chk=check val=validate ver=verify

### File/Path
bin=binary lib=library inc=include src=source tst=test doc=docs cfg=config log=logs tmp=temporary

### Network/Web
http=http https=https api=api rest=restful gql=graphql ws=websocket tcp=tcp udp=udp dns=dns ssl=ssl tls=tls

### Development
git=git svn=subversion ci=continuous-integration cd=continuous-deployment pr=pull-request mr=merge-request br=branch tag=tag rel=release

## TEMPLATES

### PROJECT3 (Enterprise)
P3{T:"name",PM:{P:purpose,D:desc,S:status,L:license,PL:platform},CS:{CF:[main-files],AS:[auto-scripts],D:[docs],CFG:[configs]},CA3:{@:arch-pat,CL:[classes],TM:threading-model,SH:[signal-handling],IPC:[ipc-mechanisms],UI:[ui-components]},TI3:{L:language,D:[deps],PO:[performance-opts],EH:[error-handling],CONST:[constants]}}

### SCRIPT3 (Production)
S3{@:prod-script,CORE:main-func,L1:[impl-details],L2:[robust-features],L3:[polish-features],WH:context,IN:[includes]}

### API3 (Enterprise API)
A3{T:"name",PM:{P:purpose,V:version},EP:{GET:[endpoints],POST:[endpoints],PUT:[endpoints],DEL:[endpoints]},AUTH:{T:type,M:methods},DATA:{REQ:[request-models],RES:[response-models]},ERR:[error-codes]}

### SERVICE3 (Production Service)
SV3{T:"name",PM:{P:purpose,T:type},DEPLOY:{CONT:[containers],CFG:[configs]},MON:{LOG:[logging],MET:[metrics],HEALTH:[health-checks]},SCALE:{H:horizontal,V:vertical,AUTO:[auto-scaling]}}

### DATABASE3 (Enterprise DB)
DB3{T:"name",PM:{T:type,E:engine},SCHEMA:{TBL:[tables],IDX:[indexes],REL:[relationships]},PERF:{OPT:[optimizations],CACHE:[caching]},BACKUP:{STRAT:[strategies],SCHED:[schedules]}}

## PATTERN LIB

@prod-script:[set-e+trap,color-fn[R+Y+G+NC],dep-loop[chk+inst+val],progress[step+status],svc-mgmt[stop+inst+start+verify],err-help[debug+trouble],cleanup[signal+resource]]

@arch-pat:[sep[concern+resp],loose-coup[event+signal],cfg-abs[mgmt+persist],ui-iso[tray+menu+anim]]

@install-pat:[dep-chk[miss+prompt],file-place[path+backup+perm],svc-setup[enable+start+status],sudo-cfg[rules+validate]]

@api-pat:[rest[crud+json],auth[jwt+oauth],valid[input+schema],err[codes+messages],rate-limit[user+ip],docs[swagger+openapi]]

@web-pat:[spa[react+vue+angular],ssr[next+nuxt],state[redux+vuex],route[react-router+vue-router],build[webpack+vite]]

@mobile-pat:[native[ios+android],cross[react-native+flutter+ionic],state[redux+mobx],nav[navigation],data[async+cache]]

@data-pat:[etl[extract+transform+load],pipeline[stream+batch],warehouse[fact+dimension],lake[raw+processed],real-time[kafka+kinesis]]

@ml-pat:[prep[clean+transform],train[model+validate],deploy[serve+monitor],pipe[feature+model],exp[track+compare]]

@devops-pat:[ci[build+test+deploy],cd[auto+manual],infra[iac+terraform],mon[logs+metrics+alerts],sec[scan+secrets]]

@sec-pat:[auth[mfa+sso],authz[rbac+abac],encrypt[rest+transit],scan[sast+dast],pen-test[auto+manual]]

@perf-pat:[cache[mem+disk+cdn],opt[db+query+index],scale[horizontal+vertical],load-bal[round-robin+weighted],cdn[static+dynamic]]

## COMPRESSION TECHNIQUES
1.Attr-reduce 2.Val-compress(+) 3.Hier-nest 4.Rel-encode(→↔⊂) 5.Prop-bracket[] 6.Seq-chain→ 7.Group-parallel(,) 8.Nested-frames 9.Symbol-short(%$#) 10.Domain-notation 11.Quality-strat(1-3) 12.Layer-detail(CORE→L3) 13.Pattern-ref(@) 14.Context-direct(APP/WH) 15.Polish-encode 16.Impl-hints 17.Universal-patterns 18.Single-char-keys 19.Abbrev-tech-terms 20.Numeric-quality 21.Symbol-operators 22.Path-compression 23.Command-abbreviation 24.Context-inference 25.Symbol-linking 26.Preserve-semantics 27.Dynamic-abbrev 28.Pattern-templates 29.Conditional-expansion 30.Cross-referencing 31.Domain-adaptive 32.Recursive-compression

## EXAMPLES

### Ultra-Compressed README with Flexible Symbol Linking (825 chars vs 5KB original)
SYMBOLS:{@:app-name,&:file,#:path,$:class}
P3{T:"YAY Update Notifier"@,TL:arch+pkg+upd+tray+notif,D:py3qt6[mon-yay+desk-notif+bg-svc],F:[rt-mon,tray-int,desk-notif,bg-svc,auto-cfg,term-int,sing-inst,grace-shut],R:{OS:arch,D:py3.6+qt6+yay+systemd+term,E:x11|wayland+tray},I3:{@:install-pat,Q:"install.sh"&→auto,M:makepkg-si→pacman-U→systemctl-enable,R:"uninstall.sh"&b→clean},U:{S:systemctl-start→bg,M:python3-"yt.py"&a→dir,I:tray[rc→menu],U:click→term→yay},C:{L:"~/.config/yt/settings.json"#,A:1st[def],O:[interval[min],persistence[bool],auto[bool],terminal[str]]},FL:{M:&a[575L],S:yt.service[16L],I:yt.svg,SC:[&[151L],&b[96L],build.sh[78L]]},A3:{@:arch-pat,CL:["UpdateNotifier"$[app+tray],"UpdateChecker"$a[bg+yay],"SettingsManager"$b[cfg+validation],"SingleInstance"$c[lock+dup]],TH:qt[ui+bg],IPC:subprocess[yay+to]},DV2:{B:./build.sh→tar+makepkg,DB:journalctl-u-yt-f,T:man[!auto],ST:py3+qt6+cls+sig},TR:[!tray[chk-desktop-env+support],svc-fail[journalctl+permissions],stuck[restart+clear],multiple[check-lock]],CO:{R:github/pt8594/@,I:bug+feat,C:py3+qt6+patterns,T:manual-validation},M:{L:opensource,A:pt8594,S:active-dev+stable,V:1.0}}

### Complete Project Archive (5KB vs 150KB+ equivalent)
AR3{T:"YAY Update Notifier v1.0",V:1.0.0,TS:2025-01-08T22:00:00Z,A:pt8594,R:gh.com/pt8594/yt,PM:{P:arch+pkg-mon+tray-notif+yay-int,D:py3qt6[desk-notif+bg-svc+upd-chk],S:stab-rel+act-dev,L:oss,PL:arch[roll]}...}

### API Documentation (Compressed)
A3{T:"REST API v2.1",PM:{P:user-mgmt+data-proc,V:2.1.0},EP:{GET:[/user/{id}[ret-user],/users[ret-list+page],/health[ret-status]],POST:[/user[cr8-user+valid],/auth[login+jwt]],PUT:[/user/{id}[upd-user+valid]],DEL:[/user/{id}[del-user+cascade]]},AUTH:{T:jwt,M:[bearer+header]},DATA:{REQ:[User{id:int,name:str,email:str},Auth{user:str,pass:str}],RES:[UserRes{user:User,created:ts},AuthRes{token:str,exp:ts}]},ERR:[400[bad-req],401[unauth],403[forbid],404[not-fnd],500[srv-err]]}

## DECOMPRESSION PROMPT

"Parse Ultra SFC v3.0. Key mappings: T=title,D=desc,F=feat,R=req,I=install,U=usage,C=config,A=arch,M=meta,etc. Quality: 1=basic,2=prod,3=enterprise. Symbols: +=and,|=or,→=to,!=not,[]array,{}object. Abbrev: py=python,qt=pyqt,svc=service,cfg=config,etc. Symbol refs: FLEXIBLE - check SYMBOLS:{} block for entity type definitions. Multi refs: @a,@b,@c or use different symbols. Preserve complete: variable names, person names, place names, function names, class names, constants, error messages. Expand to complete [TYPE]:

[ULTRA_SFC_CONTENT]

Guidelines: 1.Decode single-char keys 2.Expand abbreviations 3.Respect quality markers(1-3) 4.Apply @patterns fully 5.Follow symbol operators 6.Maintain relationships 7.Include all encoded polish 8.Resolve symbol references 9.Preserve semantic completeness"

## EFFECTIVENESS

| Type | Original | Ultra SFC | Ratio | Fidelity |
|------|----------|-----------|-------|----------|
| README | 5KB | 852c | 6:1 | 90% |
| Project | 150KB+ | 5KB | 30:1 | 95% |
| API Docs | 20KB | 1.2KB | 17:1 | 95% |
| Scripts | 6KB | 400c | 15:1 | 95% |

## BEST PRACTICES
1.Single-char-keys for major sections 2.Numeric quality(1-3) vs stars 3.Symbol-operators for relationships 4.Abbrev common tech terms 5.Path-compression for files 6.Command-abbreviation for ops 7.Context-inference where possible 8.Pattern-ref for common structures 9.Layer progressively(CORE→L3) 10.Preserve critical constants 11.Encode polish in L2/L3 12.Use @patterns for reusability 13.Maintain semantic relationships 14.Compress redundant info 15.Test decompression fidelity

## SEMANTIC PRESERVATION RULES
1.Variable-names: KEEP-COMPLETE[semantically-important+debugging+context]
2.Person-names: KEEP-COMPLETE[identity+context+relationship]
3.Place-names: KEEP-COMPLETE[location+context+significance]
4.Repeated-refs: USE-SYMBOL-LINKING[first-occurrence+subsequent-use-symbol]
5.Function-names: KEEP-COMPLETE[purpose+behavior+debugging]
6.Class-names: KEEP-COMPLETE[type+inheritance+structure]
7.Constants: KEEP-COMPLETE[exact-values+units+precision]
8.Error-messages: KEEP-COMPLETE[debugging+troubleshooting]

## SYMBOL LINKING PATTERN (1-char refs)
DEF-SYMBOLS: Define entity types as needed
- SYMBOLS:{@:person,#:location,$:function,%:variable,&:file}
- SYMBOLS:{@:api-endpoint,#:table,$:service,%:component}
USE-REFS: First-mention[EntityName@] then subsequent[@+action] saves 2-3 chars per ref  
MULTIPLE: If need 2+ of same type: @a,@b,@c or use different symbols
FLEXIBLE: Can define any entity type that repeats frequently in content

## ADVANCED FEATURES
Context-aware expansion: WH:bash+install→includes shell best practices
Pattern inheritance: @api-pat→@rest-pat→specific implementations  
Quality cascading: P3 inherits enterprise patterns throughout
Symbolic math: ~30%↑perf, $50-100 cost range
Multi-dimensional compression: Technical+temporal+contextual
Self-documenting: Key mappings embedded in notation

## POWER FEATURES v3.1
DYNAMIC-ABBREV: Auto-create abbreviations for frequent terms (use-count>3)
- ABBREV:{dynamically-generated-micro-service:dgms,frequently-used-term:fut}

PATTERN-TEMPLATES: Reusable patterns with variables
- TMPL:{API-CRUD:GET-$1,POST-$1,PUT-$1/{id},DEL-$1/{id}}
- USE: API-CRUD[users] expands to full CRUD endpoints

CONDITIONAL-EXPANSION: Different details based on context
- CODE-CONTEXT: preserve exact syntax+whitespace+comments
- DOC-CONTEXT: expand concepts+examples+explanations
- DEBUG-CONTEXT: include error-codes+troubleshooting+logs

CROSS-REFS: Link between document sections
- SECTION-REFS: →S1.2,←S3.4,⟷S2.1 (forward/back/bidirectional)
- DEPENDENCY-CHAIN: A→B→C[circular-A] shows flow+dependencies

DOMAIN-ADAPTIVE: Auto-adjust compression for content type
- CODE: preserve-syntax+variables+structure
- BUSINESS: focus-outcomes+stakeholders+timelines  
- TECHNICAL: specs+architecture+implementation-details
- NARRATIVE: characters+plot+themes+dialogue

RECURSIVE-COMPRESSION: Compress patterns within patterns
- NESTED: {@:@pat[sub-pattern[nested-symbol]]}
- LAYERED: L1[@pat]→L2[@pat-detail]→L3[@pat-polish]

TARGET-COMPRESSION: Adaptive ratio based on constraints
- ULTRA[50:1]: maximum-compression+symbol-heavy
- BALANCED[15:1]: readability+compression-balance
- READABLE[5:1]: minimal-compression+clarity-focus

## ERROR RECOVERY
PARTIAL-CORRUPTION: If symbols missing, use context+remaining structure
GRACEFUL-DEGRADATION: Unknown-symbols→literal-text fallback
VALIDATION: Built-in checksums for critical sections
REDUNDANCY: Critical-info stored in multiple forms when space allows

## LIMITATIONS
1.Requires Ultra SFC knowledge 2.Abbreviation learning curve 3.Context ambiguity possible 4.Quality assessment subjective 5.Pattern maintenance needed 6.Over-compression risk 7.Debugging complexity 8.Dynamic features add complexity 9.Domain-adaptation requires training

## CONCLUSION
Ultra SFC v3.0: 30:1 compression + 95% fidelity. Single-char keys, numeric quality, symbol operators, tech abbreviations. Max info density for 16K LLM limits. Ideal: complete project transfer, API docs, system architecture, deployment guides. Enables massive knowledge transfer in minimal space.
